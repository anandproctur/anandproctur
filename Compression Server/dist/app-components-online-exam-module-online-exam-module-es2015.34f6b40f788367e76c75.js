(window.webpackJsonp=window.webpackJsonp||[]).push([[53],{"+Qr1":function(t,e,s){"use strict";s.r(e),e.default="<router-outlet></router-outlet>\r\n"},JXh7:function(t,e,s){"use strict";s.r(e),e.default=""},a9Ud:function(t,e,s){"use strict";s.r(e),e.default='<section>\r\n  \x3c!-- course module --\x3e\r\n  <section class="header-section">\r\n    <div>\r\n      <div class="header-title">\r\n        <span>Online Test</span>\r\n        <span style="float: right;" class="downloadSection"><a style="color: white;"\r\n            href="https://examdesk.co/ExamdeskWordParser.zip"><i class="fa fa-download"></i> Word\r\n            Parser</a></span>\r\n        \x3c!-- <span style="float: right;padding-right: 10px;cursor: pointer;" class="downloadSection"\r\n          (click)="openExamdesk()">Go to ExamDesk</span> --\x3e\r\n      </div>\r\n    </div>\r\n  </section>\r\n   <div class="course-menu-section-container">\r\n    \x3c!-- <div class="course-menu-item" *ngIf="jsonFlag.showExamDesk" routerLink="/view/online-exam/examcourse">\r\n      <div class="menu-title">\r\n        <img src="./assets/images/online-exam/exam_desk.svg" alt="examDesk course assignment">\r\n        <span>ExamDesk Course Assignment</span>\r\n      </div>\r\n      <div class="menu-description">\r\n        <span> Data setup your academic year, faculties, classrooms, etc</span>\r\n      </div>\r\n    </div> --\x3e\r\n\r\n    <div class="course-menu-item" (click)="openExamdesk()">\r\n      <div class="menu-title">\r\n        <img src="./assets/images/online-exam/exam_desk.svg" alt="examDesk course assignment">\r\n        <span>Go to ExamDesk</span>\r\n      </div>\r\n      <div class="menu-description">\r\n      </div>\r\n    </div>\r\n\r\n  </div>\r\n\r\n</section>'},bLBS:function(t,e,s){"use strict";s.r(e),e.default=".middle-section {\n  padding: 1%;\n}\n\n.header-section .header-title {\n  text-align: left;\n  font-size: 14px;\n  font-weight: 600;\n  color: #0084f6;\n}\n\n.course-menu-section-container {\n  display: flex;\n  flex-direction: row;\n  justify-content: flex-start;\n  flex-wrap: wrap;\n  padding-top: 10px;\n  margin-top: 10px;\n  border-top: 1px solid rgba(10, 10, 10, 0.5);\n  width: 100%;\n}\n\n.course-menu-section-container .course-menu-item {\n  padding: 15px 10px;\n  width: 31%;\n  background: #fff;\n  height: 120px;\n  border-radius: 4px;\n  cursor: pointer;\n  text-align: left;\n  margin: 1%;\n  box-shadow: 0px 3px 6px #696969;\n}\n\n.course-menu-section-container .course-menu-item .menu-title {\n  width: 100%;\n  justify-content: flex-start;\n  font-size: 14px;\n  font-weight: 600;\n  display: flex;\n  flex-direction: row;\n}\n\n.course-menu-section-container .course-menu-item .menu-title img {\n  width: 25px;\n  height: 25px;\n}\n\n.course-menu-section-container .course-menu-item .menu-title span {\n  margin-left: 10px;\n  margin-top: 5px;\n}\n\n.course-menu-section-container .course-menu-item .menu-description {\n  padding: 10px;\n  font-size: 12px;\n}\n\n.downloadSection {\n  padding-right: 10px;\n  cursor: pointer;\n  font-size: 14px;\n  border: 1px solid #0084f6;\n  padding: 2px 10px;\n  color: white;\n  border-radius: 4px;\n  background: #0084f6;\n  margin-right: 10px;\n}\n"},fqkT:function(t,e,s){"use strict";s.r(e),s.d(e,"OnlineExamModule",(function(){return I}));var n=s("fXoL"),i=s("ofXK"),r=s("tyNb"),a=function(t,e,s,n){var i,r=arguments.length,a=r<3?e:null===n?n=Object.getOwnPropertyDescriptor(e,s):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)a=Reflect.decorate(t,e,s,n);else for(var o=t.length-1;o>=0;o--)(i=t[o])&&(a=(r<3?i(a):r>3?i(e,s,a):i(e,s))||a);return r>3&&a&&Object.defineProperty(e,s,a),a},o=function(t,e){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(t,e)},d=function(t){return t&&t.__esModule?t:{default:t}};let c=(()=>{let t=class{constructor(){}ngOnInit(){}};return t.ctorParameters=()=>[],t=a([Object(n.Component)({selector:"app-online-exam-module",template:d(s("+Qr1")).default,styles:[d(s("JXh7")).default]}),o("design:paramtypes",[])],t),t})();var l=s("xf7K"),u=s("LVrB"),h=s("N+K7"),p=function(t,e,s,n){var i,r=arguments.length,a=r<3?e:null===n?n=Object.getOwnPropertyDescriptor(e,s):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)a=Reflect.decorate(t,e,s,n);else for(var o=t.length-1;o>=0;o--)(i=t[o])&&(a=(r<3?i(a):r>3?i(e,s,a):i(e,s))||a);return r>3&&a&&Object.defineProperty(e,s,a),a},g=function(t,e){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(t,e)},f=function(t){return t&&t.__esModule?t:{default:t}};let m=(()=>{let t=class{constructor(t,e,s){this.router=t,this.auth=e,this.http=s,this.jsonFlag={isProfessional:!1,isAdmin:!1,showExamDesk:!1,institute_id:"",isShowEcourseMapping:!1},this.role_feature=u.a.features,null==sessionStorage.getItem("userid")&&this.router.navigateByUrl("/authPage")}ngOnInit(){if(this.auth.institute_type.subscribe(t=>{this.jsonFlag.isProfessional="LANG"==t}),this.jsonFlag.institute_id=sessionStorage.getItem("institute_id"),this.checkUserAccess(),this.jsonFlag.isAdmin||this.role_feature.ONLINE_TESTS_MENU){let t=Number(sessionStorage.getItem("institute_setup_type"));this.jsonFlag.showExamDesk=this.checkInstSetupType(t,4)}}checkUserAccess(){const t=sessionStorage.getItem("permissions"),e=(sessionStorage.getItem("permitted_roles"),sessionStorage.getItem("userType"));"3"==e?this.jsonFlag.isAdmin=!1:"0"==e&&(""!=t&&null!=t||(this.jsonFlag.isAdmin=!0,this.jsonFlag.isShowEcourseMapping=!0)),"1"==sessionStorage.getItem("enable_elearn_course_mapping_feature")&&(this.jsonFlag.isShowEcourseMapping=!0)}checkInstSetupType(t,e){if(0!=t){for(var s=2,n=1;s!=t;)n++,s+=2;for(var i=[0,0,0,0,0,0,0,0],r=n.toString(2),a=0,o=r.length-1;o>=0;o--)i[a]=parseInt(r.charAt(o)),a++;switch(e){case 2:if(1==i[0])return!0;break;case 4:if(1==i[1])return!0;break;case 8:if(1==i[2])return!0;break;case 16:if(1==i[3])return!0;break;case 32:if(1==i[4])return!0;break;case 64:if(1==i[5])return!0;break;case 128:if(1==i[6])return!0;break;case 256:if(1==i[7])return!0;break;default:return!1}return!1}return!1}openExamdesk(){this.http.getData("/api/v2/user/examdesk/SSO").subscribe(t=>{window.open("https://uat.examdesk.co/administrator/login?token="+t.result)})}};return t.ctorParameters=()=>[{type:r.Router},{type:l.a},{type:h.a}],t=p([Object(n.Component)({selector:"app-online-exam-home",template:f(s("a9Ud")).default,styles:[f(s("bLBS")).default]}),g("design:paramtypes",[r.Router,l.a,h.a])],t),t})();var b=s("Sy1n"),v=s("lJxs"),x=s("tk/3"),y=function(t,e,s,n){var i,r=arguments.length,a=r<3?e:null===n?n=Object.getOwnPropertyDescriptor(e,s):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)a=Reflect.decorate(t,e,s,n);else for(var o=t.length-1;o>=0;o--)(i=t[o])&&(a=(r<3?i(a):r>3?i(e,s,a):i(e,s))||a);return r>3&&a&&Object.defineProperty(e,s,a),a},_=function(t,e){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(t,e)};let S=(()=>{let t=class{constructor(t,e){this.auth=t,this.http=e,this.baseUrl="",this.auth.currentAuthKey.subscribe(t=>{this.Authorization=t,this.headers=new x.e({"Content-Type":"application/json",Authorization:this.Authorization})}),this.auth.currentInstituteId.subscribe(t=>{this.institute_id=t}),this.baseUrl=this.auth.getBaseUrl()}getCoursesList(){let t=`${this.baseUrl}/api/v1/institute/courseMapping/${this.institute_id}?isOnline=all`;return this.http.get(t,{headers:this.headers}).pipe(Object(v.a)(t=>t,t=>t))}getCoursesListExamDesk(){let t=`${this.baseUrl}/api/v1/institute/courseMapping/${this.institute_id}?isOnline=N`;return this.http.get(t,{headers:this.headers}).pipe(Object(v.a)(t=>t,t=>t))}getStandard(){let t=`${this.baseUrl}/api/v1/standards/all/${this.institute_id}/?active=Y`;return this.http.get(t,{headers:this.headers}).pipe(Object(v.a)(t=>t,t=>t))}getStudentList(t){t.institute_id=this.institute_id;let e=this.baseUrl+"/api/v1/institute/studentCourseMapping/getStudAndUsers";return this.http.post(e,t,{headers:this.headers}).pipe(Object(v.a)(t=>t,t=>t))}batchData(t){let e=this.baseUrl+"/api/v1/batches/fetchCombinedBatchData/"+this.institute_id+"?standard_id="+t.standard_id+"&subject_id="+t.subject_id;return this.http.get(e,{headers:this.headers}).pipe(Object(v.a)(t=>t,t=>t))}getStudentList2(t){t.institute_id=this.institute_id;let e=this.baseUrl+"/api/v1/institute/studentCourseMapping/v2/fetchStudentsFilterWise";return this.http.post(e,t,{headers:this.headers}).pipe(Object(v.a)(t=>t,t=>t))}assignStudentToCourse(t,e){t.institute_id=this.institute_id;let s=`${this.baseUrl}/api/v1/institute/studentCourseMapping/${e}/assignStudents`;return this.http.post(s,t,{headers:this.headers}).pipe(Object(v.a)(t=>t,t=>t))}getAllMasterCourse(){let t=this.baseUrl+"/api/v1/courseMaster/fetch/"+this.institute_id+"/all";return this.http.get(t,{headers:this.headers}).pipe(Object(v.a)(t=>t,t=>t))}getAllCourse(t){let e=this.baseUrl+"/api/v1/courseMaster/fetch/"+this.institute_id+"/"+t;return this.http.get(e,{headers:this.headers}).pipe(Object(v.a)(t=>t,t=>t))}};return t.ctorParameters=()=>[{type:l.a},{type:x.b}],t=y([Object(n.Injectable)(),_("design:paramtypes",[l.a,x.b])],t),t})();var L=function(t,e,s,n){var i,r=arguments.length,a=r<3?e:null===n?n=Object.getOwnPropertyDescriptor(e,s):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)a=Reflect.decorate(t,e,s,n);else for(var o=t.length-1;o>=0;o--)(i=t[o])&&(a=(r<3?i(a):r>3?i(e,s,a):i(e,s))||a);return r>3&&a&&Object.defineProperty(e,s,a),a},C=function(t,e){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(t,e)},w=function(t){return t&&t.__esModule?t:{default:t}};let D=(()=>{let t=class{constructor(t,e,s){this.apiService=t,this.auth=e,this.toastCtrl=s,this.coursesList=[],this.dummyArr=[0,1,2,3,4,0,1,2,3,4],this.columnMaps=[0,1,2],this.columnMapsTr=[0,1,2,3,4,5],this.searchValue="",this.coursesListDataSource=[],this.standardList=[],this.studentDataSourceList=[],this.studentList=[],this.tableData=[],this.masterCourse=[],this.courses=[],this.subjectList=[],this.batchList=[],this.tempBatchList=[],this.tempData="",this.radioOption="0",this.filterOption="0",this.standard_id=-1,this.dataStatus=1,this.assignPopUp=!1,this.headerChecked=!1,this.isCourse=!1,this.isCourseModule=!1,this.schoolModel=!1,this.examAssignmentData={institute_id:0,master_course_name:"",course_id:-1,subject_id:-1,standard_id:-1,batch_id:-1}}ngOnInit(){this.fetchCoursesList(),this.getAllStandardList(),this.getMasterCourse(),this.getData("first"),"1"==sessionStorage.getItem("course_structure_flag")?this.isCourseModule=!0:this.isCourseModule=!1,this.auth.schoolModel.subscribe(t=>{this.schoolModel=!1,t&&(this.schoolModel=!0)})}clearData(t){1==t?(this.examAssignmentData.subject_id=-1,this.batchList=this.tempBatchList):this.examAssignmentData.batch_id=-1}fetchCoursesList(){this.auth.showLoader(),this.dataStatus=1,this.apiService.getCoursesListExamDesk().subscribe(t=>{this.auth.hideLoader(),this.dataStatus=2,this.coursesList=t,this.coursesListDataSource=t},t=>{this.dataStatus=2,this.auth.hideLoader(),this.messageNotifier("error","",t.error.message)})}getAllStandardList(){this.auth.showLoader(),this.apiService.getStandard().subscribe(t=>{this.auth.hideLoader(),this.standardList=t},t=>{this.auth.hideLoader(),this.messageNotifier("error","",t.error.message)})}searchInList(){if(""!=this.searchValue&&null!=this.searchValue){let t=this.coursesListDataSource.filter(t=>Object.keys(t).some(e=>null!=t[e]&&t[e].toString().toLowerCase().includes(this.searchValue.toLowerCase())));this.coursesList=t}else this.coursesList=this.coursesListDataSource}assignStudent(t){this.tempData=t,this.assignPopUp=!0,this.getAllStudentList()}getExamAssignmentData(){this.auth.showLoader(),this.apiService.getStudentList2(this.examAssignmentData).subscribe(t=>{this.dataStatus=2,this.auth.hideLoader(),this.studentDataSourceList=t,this.studentList=this.keepCloning(t),this.onRadioButtonChange()},t=>{this.dataStatus=2,this.auth.hideLoader(),this.messageNotifier("error","",t.error.message)})}getAllStudentList(){this.studentList=[],this.studentDataSourceList=[],this.auth.showLoader();let t={standard_id:this.standard_id,course_type_id:this.tempData.course_type_id};this.dataStatus=1,this.apiService.getStudentList(t).subscribe(t=>{this.dataStatus=2,this.auth.hideLoader(),this.studentDataSourceList=t,this.studentList=this.keepCloning(t),this.onRadioButtonChange()},t=>{this.dataStatus=2,this.auth.hideLoader(),this.messageNotifier("error","",t.error.message)})}onfilterOptionChange(){switch(this.isCourse=!1,this.filterOption){case"0":this.isCourse=!1,this.tableData=[],this.studentList=[],this.examAssignmentData={institute_id:0,master_course_name:"",course_id:-1,subject_id:-1,standard_id:this.standard_id,batch_id:-1},this.getExamAssignmentData();break;case"1":this.isCourse=!0,this.tableData=[],this.studentList=[],this.examAssignmentData={institute_id:0,master_course_name:"",course_id:-1,subject_id:-1,standard_id:-1,batch_id:-1}}this.onRadioButtonChange()}onRadioButtonChange(){this.studentList.length>0?"0"==this.radioOption?(this.tableData=this.studentList,this.checkIfHeaderChecked()):"1"==this.radioOption?(this.headerChecked=!1,this.tableData=this.studentList.filter(t=>1==t.assigned),this.tableData.length>0&&(this.headerChecked=!0)):(this.headerChecked=!1,this.tableData=this.studentList.filter(t=>0==t.assigned)):this.tableData=[]}onHeaderCheckBox(t){t?(this.headerChecked=!0,this.tableData.forEach(t=>{t.assigned=!0})):(this.headerChecked=!0,this.tableData.forEach(t=>{t.assigned=!1}))}checkIfHeaderChecked(){for(let t=0;t<this.tableData.length;t++){if(0==this.tableData[t].assigned){this.headerChecked=!1;break}this.headerChecked=!0}}closePopup(){this.assignPopUp=!1,this.isCourse=!1,this.radioOption="0",this.studentDataSourceList=[],this.studentList=[],this.standard_id=-1,this.filterOption="0",this.examAssignmentData={institute_id:0,master_course_name:"",course_id:-1,subject_id:-1,standard_id:-1,batch_id:-1}}addStudentToCourse(){let t=this.getSelectedStudent();if(0==t.length)return void this.messageNotifier("error","","Please select student to assign in batch");let e={studentArray:t};this.auth.showLoader(),this.apiService.assignStudentToCourse(e,this.tempData.course_type_id).subscribe(t=>{this.auth.hideLoader(),this.messageNotifier("success","Student assigned successfully",""),this.fetchCoursesList(),this.closePopup()},t=>{this.auth.hideLoader(),this.messageNotifier("error","",t.error.message)})}getMasterCourse(){this.auth.showLoader(),this.apiService.getAllMasterCourse().subscribe(t=>{this.examAssignmentData.master_course_name="",this.examAssignmentData.course_id=-1,this.masterCourse=t,this.auth.hideLoader()},t=>(this.auth.hideLoader(),t))}getCourses(t){this.auth.showLoader(),this.apiService.getAllCourse(t).subscribe(t=>{this.courses=t.coursesList,this.auth.hideLoader()},t=>(this.auth.hideLoader(),t))}getData(t){this.dataStatus=2,this.apiService.batchData(this.examAssignmentData).subscribe(e=>(console.log(e),"first"==t?(this.tempBatchList=e.batchLi,void(this.batchList=this.tempBatchList)):-1==this.examAssignmentData.subject_id?(this.examAssignmentData.batch_id=-1,void(this.subjectList=e.subjectLi)):void(-1==this.examAssignmentData.batch_id&&(this.batchList=e.batchLi,0==this.batchList.length&&(this.batchList=this.tempBatchList)))),t=>{this.messageNotifier("error","",t.error.message)})}getSelectedStudent(){let t={};for(let e=0;e<this.studentDataSourceList.length;e++)for(let s=0;s<this.studentList.length;s++)1==this.studentDataSourceList[e].user_type&&1==this.studentList[s].user_type&&this.studentDataSourceList[e].student_id==this.studentList[s].student_id&&this.studentDataSourceList[e].assigned!=this.studentList[s].assigned&&(t[this.studentList[e].student_id]=this.studentList[s].assigned);return t}messageNotifier(t,e,s){let n={type:t,title:e,body:s};this.toastCtrl.popToast(n)}keepCloning(t){if(null===t||"object"!=typeof t)return t;let e=t.constructor();for(var s in t)e[s]=this.keepCloning(t[s]);return e}};return t.ctorParameters=()=>[{type:S},{type:l.a},{type:b.a}],t=L([Object(n.Component)({selector:"app-examdesk-course-assignment",template:w(s("qID6")).default,styles:[w(s("uKlR")).default]}),C("design:paramtypes",[S,l.a,b.a])],t),t})();var k=function(t,e,s,n){var i,r=arguments.length,a=r<3?e:null===n?n=Object.getOwnPropertyDescriptor(e,s):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)a=Reflect.decorate(t,e,s,n);else for(var o=t.length-1;o>=0;o--)(i=t[o])&&(a=(r<3?i(a):r>3?i(e,s,a):i(e,s))||a);return r>3&&a&&Object.defineProperty(e,s,a),a};const M=[{path:"",component:c,pathMatch:"prefix",children:[{path:"",component:m}]},{path:"examcourse",component:D,pathMatch:"prefix"}];let j=(()=>{let t=class{};return t=k([Object(n.NgModule)({imports:[r.RouterModule.forChild(M)],exports:[r.RouterModule]})],t),t})();var O=s("hGdz"),A=s("qZSc"),R=function(t,e,s,n){var i,r=arguments.length,a=r<3?e:null===n?n=Object.getOwnPropertyDescriptor(e,s):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)a=Reflect.decorate(t,e,s,n);else for(var o=t.length-1;o>=0;o--)(i=t[o])&&(a=(r<3?i(a):r>3?i(e,s,a):i(e,s))||a);return r>3&&a&&Object.defineProperty(e,s,a),a};let I=(()=>{let t=class{};return t=R([Object(n.NgModule)({imports:[i.CommonModule,O.a,A.EstoreModule,j],declarations:[c,m,D],providers:[S]})],t),t})()},qID6:function(t,e,s){"use strict";s.r(e),e.default='<section class="clearfix ">\r\n\r\n\r\n  <div class="row head-section">\r\n    <h2 class="pull-left">\r\n      <a routerLink="/view/online-exam/">\r\n        Online Test\r\n      </a>\r\n      <i style="font-family: \'FontAwesome\';" class="fas fa-angle-right"></i>ExamDesk Batch Assignment</h2>\r\n    <div class="pull-right">\r\n      <div class="search-filter-wrapper">\r\n        <input type="text" class="normal-field" [(ngModel)]="searchValue" placeholder="Search" (keyup)="searchInList()">\r\n      </div>\r\n    </div>\r\n  </div>\r\n\r\n  <div class="table-wrapper">\r\n\r\n    <table>\r\n      <thead>\r\n        <tr>\r\n          \x3c!-- changes by Nalini - to handle school model conditions --\x3e\r\n          <th>{{schoolModel ? \'Section\' : \'Batch\'}} Name</th>\r\n          <th>Total Assigned Student</th>\r\n          <th></th>\r\n        </tr>\r\n      </thead>\r\n      <tbody *ngIf="coursesList.length > 0">\r\n        <tr *ngFor="let data of coursesList">\r\n          <td>{{data.course_type}}</td>\r\n          <td>{{data.total_assigned_student_count}}</td>\r\n          <td>\r\n            <a style="cursor: pointer;" (click)="assignStudent(data)">Assign Student</a>\r\n          </td>\r\n        </tr>\r\n      </tbody>\r\n      <tbody *ngIf="coursesList.length == 0 && dataStatus === 1">\r\n        <tr *ngFor="let dummy of dummyArr">\r\n          <td *ngFor="let c of columnMaps">\r\n            <div class="skeleton">\r\n            </div>\r\n          </td>\r\n        </tr>\r\n      </tbody>\r\n      <tbody *ngIf="(coursesList.length == 0 && dataStatus === 2)">\r\n        <tr>\r\n          <td colspan="6">\r\n            No data found\r\n          </td>\r\n        </tr>\r\n      </tbody>\r\n    </table>\r\n\r\n    \x3c!-- Paginator Here --\x3e\r\n    \x3c!-- <div class="row filter-res pagination" style="width: 100%;">\r\n      <div class="c-lg-12 c-md-12 c-sm-12 align-right">\r\n        <pagination (goPage)="fetchTableDataByPage($event)" (goNext)="fetchNext()" (goPrev)="fetchPrevious()" [pagesToShow]="10"\r\n          [page]="PageIndex" [perPage]="studentdisplaysize" [count]="totalRow">\r\n        </pagination>\r\n      </div>\r\n    </div> --\x3e\r\n\r\n  </div>\r\n\r\n</section>\r\n\r\n\r\n<proctur-popup [sizeWidth]="\'medium\'" *ngIf="assignPopUp">\r\n\r\n  <span class="closePopup pos-abs fbold show" (click)="closePopup()" close-button>\r\n    <svg class="artdeco-icon" focusable="false" height="24px" preserveAspectRatio="xMinYMin meet" viewBox="0 0 24 24"\r\n      width="24px" x="0" y="0">\r\n      <path class="large-icon"\r\n        d="M20,5.32L13.32,12,20,18.68,18.66,20,12,13.33,5.34,20,4,18.68,10.68,12,4,5.32,5.32,4,12,10.69,18.68,4Z"\r\n        style="fill: currentColor"></path>\r\n    </svg>\r\n  </span>\r\n\x3c!-- changes by Nalini - to handle school model conditions --\x3e\r\n  <h2 popup-header>{{schoolModel ? \'Section\' : \'Batch\'}} Name : {{tempData.course_type}}</h2>\r\n\r\n  <div popup-content class="student-assign-popup">\r\n    <div class=" filter-section">\r\n      <div class="row">\r\n        <div class="c-sm-5 c-md-5 c-lg-5 radio-button">\r\n          <div class="field-radio-wrapper">\r\n            <input type="radio" name="bothRadio" id="bothRadio" class="form-radio" value="0" [(ngModel)]="radioOption"\r\n              (ngModelChange)="onRadioButtonChange()">\r\n            <label for="bothRadio">Both</label>\r\n          </div>\r\n          <div class="field-radio-wrapper">\r\n            <input type="radio" name="assignRadio" id="assignRadio" value="1" class="form-radio"\r\n              [(ngModel)]="radioOption" (ngModelChange)="onRadioButtonChange()">\r\n            <label for="assignRadio">Assigned</label>\r\n          </div>\r\n          <div class="field-radio-wrapper">\r\n            <input type="radio" name="unassignStudent" id="unassignStudent" value="2" class="form-radio"\r\n              [(ngModel)]="radioOption" (ngModelChange)="onRadioButtonChange()">\r\n            <label for="unassignStudent">UnAssigned</label>\r\n          </div>\r\n        </div>\r\n        <div class="c-sm-3 c-md-3 c-lg-3 radio-button">\r\n\r\n          <div class="field-radio-wrapper" *ngIf="isCourseModule">\r\n            <input type="radio" name="standardRadio" id="standardRadio" value="0" class="form-radio"\r\n              [(ngModel)]="filterOption" (ngModelChange)="onfilterOptionChange()">\r\n            <label for="standardRadio">Standard</label>\r\n          </div>\r\n          <div class="field-radio-wrapper" *ngIf="isCourseModule">\r\n            <input type="radio" name="courseStudent" id="courseStudent" value="1" class="form-radio" [(ngModel)]="filterOption" (ngModelChange)="onfilterOptionChange()">\r\n            <label for="courseStudent">{{schoolModel ? \'Section\' : \'Batch\'}}</label>\r\n          </div>\r\n        </div>\r\n        <div class="c-sm-4 c-md-4 c-lg-4 ">\r\n          <div class="c-sm-12 c-md-12 c-lg-12">\r\n            <div class="c-sm-4 c-md-4 c-lg-4">\r\n              <div class="search-filter-wrapper">\r\n                <input #searchVal type="text" class="normal-field" placeholder="Search" id="searchStudent"\r\n                  name="searchData" [(ngModel)]="searchData">\r\n              </div>\r\n            </div>\r\n\r\n          </div>\r\n\r\n        </div>\r\n      </div>\r\n      <div class="row extraMargin" *ngIf="(!isCourse)&&isCourseModule">\r\n        <div class="c-lg-4 c-md-4 c-sm-4 c-xs-4">\r\n          <div class="field-wrapper">\r\n            <label for="master">Standard\r\n            </label>\r\n            <select class="form-ctrl" [(ngModel)]="standard_id" (change)="onfilterOptionChange()">\r\n              <option value="-1">Standard</option>\r\n              <option *ngFor="let i of standardList" [value]="i.standard_id">\r\n                {{i.standard_name}}\r\n              </option>\r\n            </select>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div class="row extraMargin" *ngIf="isCourse&&isCourseModule">\r\n        \x3c!-- changes by Nalini - to handle school model conditions --\x3e\r\n        <div class="c-lg-4 c-md-4 c-sm-4 c-xs-4">\r\n          <div class="field-wrapper">\r\n            <label for="master">{{schoolModel ? \'Standard\' : \'Category/Course\'}}\r\n            </label>\r\n            <select class="form-ctrl" [(ngModel)]="examAssignmentData.master_course_name" (change)="getCourses($event.target.value)">\r\n              <option value="">{{schoolModel ? \'Standard\' : \'Category/Course\'}}</option>\r\n              <option *ngFor="let i of masterCourse" [value]="i.master_course">\r\n                {{i.master_course}}\r\n              </option>\r\n            </select>\r\n          </div>\r\n        </div>\r\n\r\n        <div class="c-lg-4 c-md-4 c-sm-4 c-xs-4">\r\n          <div class="field-wrapper">\r\n            <label for="course">{{schoolModel ? \'Section\' : \'Batch\'}}\r\n            </label>\r\n            <select class="form-ctrl" [(ngModel)]="examAssignmentData.course_id">\r\n              <option value="-1">{{schoolModel ? \'Section\' : \'Batch\'}}</option>\r\n              <option *ngFor="let i of courses" [value]="i.course_id">\r\n                {{i.course_name}}\r\n              </option>>\r\n            </select>\r\n\r\n          </div>\r\n        </div>\r\n\r\n        <div class="c-lg-2 c-md-2 c-sm-2 c-xs-2 text-center">\r\n          <button id="btnSave" class="btn fullBlue" style="margin-top: 1rem;" type="submit"\r\n            (click)="getExamAssignmentData()"> Go </button>\r\n\r\n        </div>\r\n      </div>\r\n      <div class="row extraMargin" *ngIf="(!isCourseModule)">\r\n        <div class="c-lg-3 c-md-3 c-sm-3 c-xs-3">\r\n          <div class="field-wrapper">\r\n            <label for="master">Category/Course\r\n            </label>\r\n            <select class="form-ctrl" [(ngModel)]="examAssignmentData.standard_id"\r\n              (change)="clearData(1);getData($event.target.value)">\r\n              <option value="-1">Category/Course</option>\r\n              <option *ngFor="let i of standardList" [value]="i.standard_id">\r\n                {{i.standard_name}}\r\n              </option>\r\n            </select>\r\n          </div>\r\n        </div>\r\n\r\n        <div class="c-lg-3 c-md-3 c-sm-3 c-xs-3">\r\n          <div class="field-wrapper">\r\n            <label for="course">Batch\r\n            </label>\r\n            <select class="form-ctrl" [(ngModel)]="examAssignmentData.subject_id"\r\n              (change)="clearData(2);getData($event.target.value)">\r\n              <option value="-1">Batch</option>\r\n              <option *ngFor="let i of subjectList" [value]="i.subject_id">\r\n                {{i.subject_name}}\r\n              </option>>\r\n            </select>\r\n\r\n          </div>\r\n        </div>\r\n        <div class="c-lg-3 c-md-3 c-sm-3 c-xs-3">\r\n          <div class="field-wrapper">\r\n            <label for="course">Batch\r\n            </label>\r\n            <select class="form-ctrl" [(ngModel)]="examAssignmentData.batch_id">\r\n              <option value="-1">Batch</option>\r\n              <option *ngFor="let i of batchList" [value]="i.batch_id">\r\n                {{i.batch_name}}\r\n              </option>>\r\n            </select>\r\n\r\n          </div>\r\n        </div>\r\n        <div class="c-lg-2 c-md-2 c-sm-2 c-xs-2 text-center">\r\n          <button id="btnSave" class="btn fullBlue" style="margin-top: 1rem;" type="submit"\r\n            (click)="getExamAssignmentData()"> Go </button>\r\n\r\n        </div>\r\n      </div>\r\n    </div>\r\n\r\n    <div class="table-wrapper">\r\n      <table>\r\n        <thead>\r\n          <tr>\r\n            <th>\r\n              <div class="field-checkbox-wrapper">\r\n                <input type="checkbox" class="form-checkbox" [(ngModel)]="headerChecked"\r\n                  (ngModelChange)="onHeaderCheckBox($event)">\r\n                <label></label>\r\n              </div>\r\n            </th>\r\n            <th>Student ID</th>\r\n            <th>Name</th>\r\n            <th>Contact No</th>\r\n            <th>Joining Date</th>\r\n            <th>Type</th>\r\n          </tr>\r\n        </thead>\r\n        <tbody *ngIf="tableData.length > 0 && dataStatus === 2">\r\n          <tr *ngFor="let data of (tableData | searchPipe:searchData)">\r\n            <td style="text-align: left">\r\n              <div class="field-checkbox-wrapper">\r\n                <input [disabled]="data.user_type == \'99\'" type="checkbox" class="form-checkbox"\r\n                  [(ngModel)]="data.assigned" (ngModelChange)="checkIfHeaderChecked()">\r\n                <label></label>\r\n              </div>\r\n            </td>\r\n            <td>\r\n              {{data.student_disp_id}}\r\n            </td>\r\n            <td>\r\n              {{data.student_name}}\r\n            </td>\r\n            <td>\r\n              {{data.student_phone}}\r\n            </td>\r\n            <td>\r\n              {{data.doj}}\r\n            </td>\r\n            <td>\r\n              <span *ngIf="data.user_type == \'99\'">Guest User</span>\r\n              <span *ngIf="data.user_type == \'1\'">Enrolled Student</span>\r\n            </td>\r\n          </tr>\r\n        </tbody>\r\n        <tbody *ngIf="tableData.length == 0 && dataStatus === 1">\r\n          <tr *ngFor="let dummy of dummyArr">\r\n            <td *ngFor="let c of columnMapsTr">\r\n              <div class="skeleton">\r\n              </div>\r\n            </td>\r\n          </tr>\r\n        </tbody>\r\n        <tbody *ngIf="tableData.length == 0 && dataStatus === 2">\r\n          <tr>\r\n            <td colspan="6">\r\n              <h3>No Student Record Found</h3>\r\n            </td>\r\n          </tr>\r\n        </tbody>\r\n      </table>\r\n    </div>\r\n\r\n  </div>\r\n\r\n  <div class="" popup-footer>\r\n    <div class="clearfix" style="margin-top :10px">\r\n      <aside class="pull-right popup-btn">\r\n        <input type="button" value="Cancel" class="btn" (click)="closePopup()">\r\n        <input type="button" value="Add Student" class="fullBlue btn" (click)="addStudentToCourse()">\r\n      </aside>\r\n    </div>\r\n  </div>\r\n\r\n</proctur-popup>'},uKlR:function(t,e,s){"use strict";s.r(e),e.default=".middle-section {\n  padding: 15px;\n}\n\n.head-section {\n  margin: 0 0 10px 0;\n}\n\n.head-section .normal-field {\n  padding: 7px 10px;\n  border: 1px solid #ccc;\n  box-sizing: border-box;\n  margin: 0;\n  float: left;\n  height: 35px;\n  font-size: 14px;\n}\n\n.skeleton {\n  position: relative;\n  overflow: hidden;\n  width: 80%;\n  height: 12px;\n  background: #efefef;\n  border-radius: 2px;\n}\n\n.skeleton::after {\n  content: '';\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  background: linear-gradient(90deg, #efefef, white, #efefef);\n  -webkit-animation: progress 1s ease-in-out infinite;\n          animation: progress 1s ease-in-out infinite;\n}\n\n.search-filter-wrapper .normal-field {\n  padding: 7px 10px;\n  border: 1px solid #ccc;\n  box-sizing: border-box;\n  margin: 0;\n  float: left;\n  height: 35px;\n  font-size: 14px;\n}\n\n.student-assign-popup .popup-title {\n  margin-left: 0px;\n}\n\n.student-assign-popup .filter-section {\n  padding: 10px 0px;\n  margin: 5px 0;\n  background: #efefef;\n}\n\n.student-assign-popup .filter-section .radio-button {\n  margin-top: 10px;\n  display: inline-flex;\n}\n\n.student-assign-popup .filter-section .radio-button .field-radio-wrapper {\n  margin-right: 5px;\n}\n\n.student-assign-popup .filter-section .field-wrapper {\n  padding-top: 0;\n}\n\n.student-assign-popup .filter-section .btn {\n  margin-left: 0;\n}\n\n.student-assign-popup .table-wrapper {\n  margin-top: 15px;\n  max-height: 265px;\n  overflow-x: hidden;\n  overflow-y: auto;\n}\n\n.student-assign-popup .table-wrapper th {\n  padding: 10px;\n}\n\n.student-assign-popup .table-wrapper td {\n  padding: 5px 10px;\n}\n"}}]);